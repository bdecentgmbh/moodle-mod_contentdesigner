{"version":3,"file":"chapter.min.js","sources":["../src/chapter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Initializes event listeners and manages chapter completion and progress updates\n * for the content designer module. Handles user interactions such as completing\n * chapters and updating the progress bar. Supports both standard and popup formats.\n * Utilizes AJAX calls to update chapter completion status and refreshes content\n * accordingly. Ensures sticky progress bar behavior during scrolling.\n *\n * @module cdelement_chapter/chapter\n * @copyright  2024 bdecent gmbh <https://bdecent.de>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'mod_contentdesigner/elements', 'core/ajax', 'core/fragment',\n    'core/templates', 'core/loadingicon', 'core/notification', 'core/str'],\n    function ($, Elements, AJAX, Fragment, Templates, LoadingIcon, Notification, Str) {\n\n        const chapterCTA = 'button.complete-chapter';\n\n        const progressBar = 'div#contentdesigner-progressbar';\n\n        let completionIcon, completionStr;\n\n        const initEventListeners = () => {\n            Templates.renderPix('e/tick', 'core').done(function (img) {\n                completionIcon = img;\n            });\n            Str.get_string('completion_manual:done', 'course').done((str) => {\n                completionStr = str;\n            });\n            // Remove previous eventlisteners on body. to support popup format.\n            document.body.removeEventListener('click', completeChapterListener);\n            document.body.addEventListener('click', completeChapterListener);\n\n            document.querySelector('#page').addEventListener('scroll', () => {\n                stickyProgress();\n            });\n\n            // Popup format support.\n            var popup = document.querySelector('body.format-popups .modal-content .modal-body');\n            if (popup !== null) {\n                popup.addEventListener('scroll', () => {\n                    stickyProgress();\n                });\n            }\n\n            window.addEventListener('scroll', () => {\n                stickyProgress();\n            });\n        };\n\n        const completeChapterListener = (e) => {\n            var completeCTA = e.target.closest(chapterCTA);\n            if (completeCTA != undefined) {\n                e.preventDefault();\n                var chapter = completeCTA.dataset.chapterid;\n                var promise = completeChapter(chapter, completeCTA);\n                promise.done(() => {\n                    updateProgress();\n                    completeCTA.classList.remove('btn-outline-secondary');\n                    completeCTA.classList.add('btn-success');\n                    completeCTA.innerHTML = completionIcon + ' ' + completionStr;\n                    Elements.removeWarning();\n                    Elements.refreshContent();\n                    let chapterlist = e.target.closest('.chapters-list');\n\n                    if (chapterlist && !chapterlist.classList.contains('completed')) {\n                        chapterlist.classList.add('completed');\n                    }\n                    // TODO: Add a additional function to support loadnext chapter works like replaceonrefresh.\n                    // Until hide this loadNextchapters().\n                    // Elements.loadNextChapters(chapter);\n                }).catch(Notification.exception);\n            }\n        };\n\n        const stickyProgress = function () {\n            var progressElem = document.querySelector('.contentdesigner-progress');\n            var contentWrapper = document.querySelector('.contentdesigner-content');\n            if (contentWrapper != undefined && contentWrapper.getBoundingClientRect().top < 50) {\n                contentWrapper.classList.add('sticky-progress');\n                progressElem.classList.add('fixed-top');\n            } else {\n                progressElem.classList.remove('fixed-top');\n                contentWrapper.classList.remove('sticky-progress');\n            }\n        };\n\n        const completeChapter = (chapter, button) => {\n            var promises = AJAX.call([{\n                methodname: 'cdelement_chapter_update_completion',\n                args: {\n                    chapter: chapter,\n                    cmid: Elements.contentDesignerData().cmid\n                }\n            }]);\n            LoadingIcon.addIconToContainerRemoveOnCompletion(button, promises[0]);\n\n            return promises[0];\n        };\n\n        const updateProgress = () => {\n            var params = { cmid: Elements.contentDesignerData().cmid };\n            Fragment.loadFragment('cdelement_chapter', 'update_progressbar',\n                Elements.contentDesignerData().contextid, params).done((html, js) => {\n                    Templates.replaceNode(progressBar, html, js);\n                }).catch(Notification.exception);\n        };\n\n        return {\n            init: function () {\n                initEventListeners();\n            },\n        };\n    });\n"],"names":["define","$","Elements","AJAX","Fragment","Templates","LoadingIcon","Notification","Str","completionIcon","completionStr","completeChapterListener","e","completeCTA","target","closest","undefined","preventDefault","chapter","dataset","chapterid","completeChapter","done","updateProgress","classList","remove","add","innerHTML","removeWarning","refreshContent","chapterlist","contains","catch","exception","stickyProgress","progressElem","document","querySelector","contentWrapper","getBoundingClientRect","top","button","promises","call","methodname","args","cmid","contentDesignerData","addIconToContainerRemoveOnCompletion","params","loadFragment","contextid","html","js","replaceNode","init","renderPix","img","get_string","str","body","removeEventListener","addEventListener","popup","window","initEventListeners"],"mappings":";;;;;;;;;;;AA2BAA,mCAAO,CAAC,SAAU,+BAAgC,YAAa,gBAC3D,iBAAkB,mBAAoB,oBAAqB,aAC3D,SAAUC,EAAGC,SAAUC,KAAMC,SAAUC,UAAWC,YAAaC,aAAcC,SAMrEC,eAAgBC,oBA8BdC,wBAA2BC,QACzBC,YAAcD,EAAEE,OAAOC,QAnCZ,8BAoCIC,MAAfH,YAA0B,CAC1BD,EAAEK,qBACEC,QAAUL,YAAYM,QAAQC,UACpBC,gBAAgBH,QAASL,aAC/BS,MAAK,KACTC,iBACAV,YAAYW,UAAUC,OAAO,yBAC7BZ,YAAYW,UAAUE,IAAI,eAC1Bb,YAAYc,UAAYlB,eAAiB,IAAMC,cAC/CR,SAAS0B,gBACT1B,SAAS2B,qBACLC,YAAclB,EAAEE,OAAOC,QAAQ,kBAE/Be,cAAgBA,YAAYN,UAAUO,SAAS,cAC/CD,YAAYN,UAAUE,IAAI,gBAK/BM,MAAMzB,aAAa0B,aAIxBC,eAAiB,eACfC,aAAeC,SAASC,cAAc,6BACtCC,eAAiBF,SAASC,cAAc,4BACtBrB,MAAlBsB,gBAA+BA,eAAeC,wBAAwBC,IAAM,IAC5EF,eAAed,UAAUE,IAAI,mBAC7BS,aAAaX,UAAUE,IAAI,eAE3BS,aAAaX,UAAUC,OAAO,aAC9Ba,eAAed,UAAUC,OAAO,qBAIlCJ,gBAAkB,CAACH,QAASuB,cAC1BC,SAAWvC,KAAKwC,KAAK,CAAC,CACtBC,WAAY,sCACZC,KAAM,CACF3B,QAASA,QACT4B,KAAM5C,SAAS6C,sBAAsBD,gBAG7CxC,YAAY0C,qCAAqCP,OAAQC,SAAS,IAE3DA,SAAS,IAGdnB,eAAiB,SACf0B,OAAS,CAAEH,KAAM5C,SAAS6C,sBAAsBD,MACpD1C,SAAS8C,aAAa,oBAAqB,qBACvChD,SAAS6C,sBAAsBI,UAAWF,QAAQ3B,MAAK,CAAC8B,KAAMC,MAC1DhD,UAAUiD,YAtFF,kCAsF2BF,KAAMC,OAC1CrB,MAAMzB,aAAa0B,kBAGvB,CACHsB,KAAM,WAvFiB,MACvBlD,UAAUmD,UAAU,SAAU,QAAQlC,MAAK,SAAUmC,KACjDhD,eAAiBgD,OAErBjD,IAAIkD,WAAW,yBAA0B,UAAUpC,MAAMqC,MACrDjD,cAAgBiD,OAGpBvB,SAASwB,KAAKC,oBAAoB,QAASlD,yBAC3CyB,SAASwB,KAAKE,iBAAiB,QAASnD,yBAExCyB,SAASC,cAAc,SAASyB,iBAAiB,UAAU,KACvD5B,wBAIA6B,MAAQ3B,SAASC,cAAc,iDACrB,OAAV0B,OACAA,MAAMD,iBAAiB,UAAU,KAC7B5B,oBAIR8B,OAAOF,iBAAiB,UAAU,KAC9B5B,qBAgEA+B"}